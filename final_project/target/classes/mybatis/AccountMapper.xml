<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hk.project.mapper.AccountMapper">

	<resultMap type="AccountDto" id="accountDtoMap">
		<id property="account_seq" column="ACCOUNT_SEQ" />
		<result property="memberid" column="MEMBERID" />
		<result property="fintech_use_num" column="FINTECH_USE_NUM" />
		<result property="bank_name" column="BANK_NAME" />
		<result property="origin_filename" column="ORIGIN_FILENAME" />
		<result property="stored_filename" column="STORED_FILENAME" />
		<result property="account_num_masked"
			column="ACCOUNT_NUM_MASKED" />
	</resultMap>

	<resultMap type="memberDto" id="memberDtoMap">
		<id property="memberid" column="MEMBERID" />
		<result property="id" column="ID" />
		<result property="password" column="PASSWORD" />
		<result property="name" column="NAME" />
		<result property="address" column="ADDRESS" />
		<result property="email" column="EMAIL" />
		<result property="role" column="ROLE" />
		<result property="useraccesstoken" column="USERACCESSTOKEN" />
		<result property="userrefreshtoken" column="USERREFRESHTOKEN" />
		<result property="userseqno" column="USERSEQNO" />
		<result property="phone" column="PHONE" />
		<result property="money" column="MONEY" />
		<collection property="memberDto" resultMap="MemberDtoMap"></collection>
	</resultMap>


	<!-- <select id="getUserList" resultType="AccountDto"> -->
	<!-- SELECT ACCOUNT_SEQ, MEMBERID, FINTECH_USE_NUM, BANK_NAME, ACCOUNT_NUM_MASKED -->
	<!-- FROM FINTECH -->
	<!-- </select> -->



	<select id="getUser" parameterType="Integer"
		resultMap="accountDtoMap">
		SELECT
		m.id,
		m.memberid,
		m.role,
		f.fintech_use_num,
		f.bank_name,
		f.account_num_masked,
		m.NAME,
		(SELECT origin_filename FROM userfile WHERE id = m.id ORDER BY file_seq DESC
		LIMIT 1) AS origin_filename,
		(SELECT stored_filename FROM userfile WHERE id = m.id ORDER BY file_seq DESC
		LIMIT 1) AS stored_filename
		FROM
		member m
		JOIN fintech f ON m.memberid = f.memberid
		ORDER BY
		CASE
		WHEN m.role = '사장' THEN 1
		WHEN m.role = '매니저' THEN 2
		WHEN m.role = '직원' THEN 3
		END


	</select>

	<!-- useGeneratedKeys="true" keyProperty="board_seq" : 증가된 board_seq값을 BoardDto에 
		전달 : insertBoard(boardDto) -->
	<insert id="insertUser" parameterType="AccountDto"
		useGeneratedKeys="true" keyProperty="account_seq">
		INSERT INTO FINTECH
		VALUES(#{account_seq},#{memberid},#{fintech_use_num},#{bank_name},#{account_num_masked})
	</insert>

	<select id="getUserDetail" parameterType="String"
		resultMap="accountDtoMap">
		SELECT m.id, m.name,m.role, f.fintech_use_num, f.bank_name,
		f.account_num_masked
		FROM member m right OUTER JOIN fintech f
		ON
		m.memberid = f.memberid
		WHERE id = #{id}
	</select>
	<select id="UserDetail" parameterType="String"
		resultMap="accountDtoMap">
		SELECT
		m.id,
		m.memberid,
		m.role,
		f.fintech_use_num,
		f.bank_name,
		f.account_num_masked,
		m.NAME,
		(SELECT origin_filename FROM userfile WHERE id = m.id ORDER BY file_seq DESC
		LIMIT 1) AS origin_filename,
		(SELECT stored_filename FROM userfile WHERE id = m.id ORDER BY file_seq DESC
		LIMIT 1) AS stored_filename
		FROM
		member m
		JOIN fintech f ON m.memberid = f.memberid
		WHERE id=#{id}
		ORDER BY
		CASE
		WHEN m.role = '사장' THEN 1
		WHEN m.role = '직원' THEN 2
		END

	</select>

	<update id="roleup" parameterType="AccountDto">
		UPDATE member
		SET ROLE = '사장'
		WHERE id=#{id};
	</update>
	<update id="roledown" parameterType="AccountDto">
		UPDATE member
		SET ROLE = '직원'
		WHERE id=#{id};
	</update>
	<update id="rolem" parameterType="AccountDto">
		UPDATE member
		SET ROLE = '매니저'
		WHERE id=#{id}
	</update>
	<!-- 해고 -->
	<delete id="membermulDel" parameterType="AccountDto">
		DELETE FROM member WHERE id = #{id}
	</delete>
</mapper>